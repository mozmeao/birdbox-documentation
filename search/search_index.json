{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Birdbox","text":"<p>.</p> <p>Birdbox is a kit for building on-brand, easily editable microsites quickly.</p> <p>It was developed by the Marketing Engineering team to save us time and to put more control over content in the hands of the relevant project\u2019s teams.</p> <p>Birdbox aims to be a full-stack solution. It brings together three key aspects:</p> <ul> <li> <p>A class-leading content management system: Wagtail</p> </li> <li> <p>Mozila\u2019s design system for the web, Protocol, to help ensure the sites look and behave like Mozilla sites</p> </li> <li> <p>Streamlined infrastructure setup.</p> </li> </ul> <p>This is a documentation-only repo. The codebase for the kit is at https://github.com/mozmeao/birdbox/</p>"},{"location":"#project-philosophy","title":"Project philosophy","text":"<p>The repository at https://github.com/mozmeao/birdbox/ is a \"turn-key\" Wagtail CMS project for Mozilla.</p> <p>This means it's pre-configured with appropriate Wagtail <code>Page</code> and <code>Block</code> types that use Protocol-based HTML, CSS and JS. This ensures that pages created are automatically on-brand and up-to-standard for Mozilla.</p> <p>Birdbox has also been through Mozilla's Rapid Risk Assessment process, so the security of sites running on Birdbox with it is up to our standards and will be kept high.</p> <p>Key concepts</p> <ol> <li> <p>You don't need to do any development to the codebase to be able to deploy a working CMS-backed website. (You can still add new things, however. Check out Extending Birdbox.)</p> </li> <li> <p>Every Birdbox site runs the same code as the core repository but that core repo is never directly deployed<sup>1</sup> - it must be forked before use. We explore this model more in Maintenance.</p> </li> <li> <p>We have clear documentation about how to connect the new site's (forked) repo to Mozilla SRE's build and deployment pipeline. After that, they deployment process is simple: if you can <code>git push origin:main|stage|prod</code>, you can deploy changes.</p> </li> <li> <p>It should be possible to go from nothing to a live site in a week - or less if no custom work development is needed.</p> </li> </ol>"},{"location":"#documentation-roadmap","title":"Documentation Roadmap","text":"<ul> <li> Move from simple Markdown to GH pages</li> <li> end-to-end setup process of a new site</li> <li> Document infra side, with code samples</li> <li> Turn all of the above into a tickable checklist, to speed up the process</li> <li> Stand up demo site, running bleeding-edge Birdbox, so that it's easy to see components in use</li> </ul> <ol> <li> <p>The exception here is the (forthcoming) demo site about birdbox, which WILL run off the bleeding-edge core repo\u00a0\u21a9</p> </li> </ol>"},{"location":"about/","title":"About this project","text":"<p>Birdbox is a project from the Marketing Engineering and Operations (MEAO) team at Mozilla.</p> <p>While it's focused on our own needs, our code is, of course, open.</p>"},{"location":"about/#core-team","title":"Core team","text":"<ul> <li>Steve Jalim, MEAO</li> <li>Craig Cook, MEAO</li> <li>Brett Kochendorfer, Mozilla SRE</li> </ul>"},{"location":"about/#thanks-to","title":"Thanks to","text":"<p>...the following for their support, feedback and/or code contributions:</p> <ul> <li>Alex Gibson</li> <li>Elise Blanchard</li> <li>Emma Navajas</li> <li>Frida Kiriakos</li> <li>Paul McLanahan</li> <li>Stephanie Hobson</li> <li>Van Le</li> </ul>"},{"location":"about/#contact","title":"Contact","text":"<p>If you have questions about Birdbox, please reach out via <code>#birdbox</code> on Mozilla Slack or Mozilla's Matrix server.</p> <p>You can also email birdbox@stevejalim.mozmail.com or open an Issue in the repo.</p>"},{"location":"adding_users_to_wagtail/","title":"Adding users to Wagtail","text":"<p>Birdbox has no concept of authenticated public users: all such users are there to access the CMS.</p> <p>These notes show how to add users with appropriate access to the CMS.</p> <p>User roles</p> <p>Birdbox ships with Wagtail's default Admin, Moderator and Editor roles, but these can be extended/complemented.</p> <p>You should have as few full Admin users as possible - ideally just the core developer on the project.</p> <p>Only very trusted people should have either an Admin role or have both the Moderator and Editor roles at the same time \u2013 these two situations allow an individual to publish content without oversight. Ideally Person A is a Moderator and Person B is an Editor, so they need each other to get content live. See the Wagtail Editor Guide's notes on roles</p> <ol> <li> <p>Get a list of the users to add. You'll need to know their Mozilla SSO email address and which Role(s) they should have - usually Editor or Moderator, and if very trusted, both. Admin roles are reserved for trusted developers and SRE team members.</p> </li> <li> <p>Open a browser and go to <code>/admin/</code> on the relevant deployed site URL. You'll see a <code>Sign in with Mozilla SSO</code> button - click it to sign in.</p> </li> <li> <p>In Wagtail's settings, find the User section:</p> </li> </ol> <p>.</p> <ol> <li> <p>Use this to add new Users, again ensuring the username and email match their SSO-linked email address.</p> </li> <li> <p>After entering the core user information, remember to give each user an appropriate role.</p> </li> <li> <p>Hit save.</p> </li> <li> <p>For each of the new users, add them to the appropriate Mozilla SSO auth group(s), so they can actually log in. You do this at <code>people.mozilla.org/a/GROUP_NAME_HERE</code>, based on the request you filed with the IAM team. Tip: There'll be a link to each group on your own people.m.o profile if you requested to be an initial curator for the new group(s).</p> </li> </ol>"},{"location":"bootstrapping/","title":"Setting up a new live site","text":"<p>These are the end-to-end steps required to set up a new site using Birdbox.</p>"},{"location":"bootstrapping/#high-level-view","title":"High-level view","text":"<p>The steps are:</p> <ol> <li>Fork the core Birdbox repo</li> <li>Set up infrastructure - servers and hostname, plus deployment pipeline</li> <li>Set up/tune site-specific configuration</li> <li>Set up basic/core site ready for content creation</li> <li>Lay in content and QA</li> <li>Go live!</li> </ol>"},{"location":"bootstrapping/#codebase","title":"Codebase","text":"<ol> <li> <p>Go to https://github.com/mozmeao/birdbox/ and fork the repo. When naming the forked repo, do not call it just <code>birdbox</code>, but please prefix it with <code>birdbox-</code>. In this documentation we'll use <code>birdbox-newsite</code> as our example name.</p> </li> <li> <p>Add appropriate team access to the forked repo, so that colleagues can manage it and you get appropriate alerts: <code>https://github.com/ORG_NAME/birdbox-newsite/settings/access</code></p> </li> <li> <p>Enable Dependabot security updates at <code>https://github.com/ORG_NAME/birdbox-newsite/settings/security_analysis</code></p> </li> <li> <p>Enable GH Actions at <code>https://github.com/ORG_NAME/birdbox-newsite/actions/</code>. This is not needed for deployments, but runs workflows like unit tests, for extra protection</p> </li> <li> <p>Protect the <code>main</code> branch in the repo at <code>https://github.com/ORG_NAME/birdbox-newsite/settings/branches</code></p> </li> </ol>"},{"location":"bootstrapping/#infrastructure-setup","title":"Infrastructure setup","text":"<p>The infrastructure we need comprises:</p> <ol> <li>A Kubernetes service for each the three environments in Mozilla's standard pattern: <code>dev</code>, <code>stage</code> and <code>production</code>.</li> <li>A deployment pipeline that takes a commit from the application repo and builds a Docker container image from it, and pushes that out to Kubernetes to serve.</li> <li>Domain/hostname setup</li> <li>Monitoring</li> <li>Alerting and error logging</li> </ol> <p>Don't worry, though - as much of this as possible is repeatable, or straightfoward to do.</p> <ul> <li> <p>The k8s service and deployment pipeline steps (items 1 and 2 above) are well documented by SRE and live in this internal documentation. At the moment, the majority of this work still needs to be done by a member of the SRE Green team, but as much as possible is already within reach of the MEAO backend team.</p> </li> <li> <p>Domain setup (Item 3) has to be handled by SRE.</p> </li> <li> <p>Monitoring (item 4) can be set up by a developer or SRE.</p> </li> <li> <p>Alerting (Item 5) can be set up by a developer and is mentioned in the Configuration setup step</p> </li> </ul> <p>Key action</p> <p>Currently, for Steps 1-4, you should request this work via a JIRA ticket: hit the Create button here.</p> <p>Use this template message to request setup, which makes it clear it is a Birdbox-based project.</p> <p>When SRE has set everything up, please add a secure note to the MEAO password vault containing the a) names of the services created e.g. <code>newsite-dev</code>, b) the projects they are in and c) the clusters they are running on. You'll need them a lot in the near future.</p> <ul> <li>Step 5 (Monitoring) can be done as part of the configuration step.</li> </ul>"},{"location":"bootstrapping/#configuration","title":"Configuration","text":"<p>There are a few areas you'll need to configure:</p> <ul> <li>Application-specific config</li> <li>Sentry config</li> <li>Slack notifications config</li> <li>SSO config</li> </ul>"},{"location":"bootstrapping/#application-configuration","title":"Application configuration","text":"<p>As part of the infrastructure setup (above), new configuration files will have been added to a private configuration repo owned by Mozilla IT: https://github.com/mozilla-it/webservices-infra/</p> <p>Note</p> <p>A developer will need appropriate access to the <code>mozilla-it</code> organisation.</p> <p>Commits made to webservices-infra need to be signed in order to be merged.</p> <p>In that repo you will find a folder for your project - e.g. <code>birdbox-newsite</code> or just <code>newsite</code>.</p> <p>In that folder, there will be several configuration files. Most of them you do not need to edit, but the ones related to environment variables may need adding to as part of configuration. Here are the files and example contents for a Birdbox-based project</p> <p>Each environment will have config specific to it, which must go in a specific file:</p> <ul> <li><code>newsite/k8s/newsite/values-dev.yaml</code> - config values for the deployed Dev site/service</li> <li><code>newsite/k8s/newsite/values-stage.yaml</code> - config values for the deployed Staging site/service</li> <li><code>newsite/k8s/newsite/values-prod.yaml</code> - config values for the deployed Production site/service</li> </ul> <p>Required contents for the env-specific files.</p> <ul> <li><code>newsite/k8s/newsite/values.yaml</code> - shared/fallback values if none is specified in one of the above files.</li> </ul> <p>Required contents for the shared file.</p> <ul> <li><code>newsite/k8s/newsite/deployment.yaml</code> - this file specifies config for all deployments, readinging from the relevant <code>values-*.yaml</code> file and the<code>values.yaml</code> files. If you add a value from <code>values.*yaml</code> you should amend the this file, too in order to use it.</li> </ul> <p>Don't forget</p> <p>After setup, review the <code>env:</code> section of the <code>deployment.yaml</code> to be sure that it is definitely pulling in all of the variables set in <code>values*.yaml</code> and that the env var's names exactly match the corresponding names used in <code>birdbox/settings/base.py</code> in the main Birdbox codebase.</p>"},{"location":"bootstrapping/#sentry-setup","title":"Sentry setup","text":"<p>In the example <code>values-*.yaml</code> file above, there is reference to a sentry_dsn and csp_reporting_endpoint. Both of these you can get by setting up a new Sentry project (one for each of dev, stage and prod):</p> <ul> <li>Sign into Sentry via Mozilla's SSO Dashboard</li> <li>Make a new Team at https://mozilla.sentry.io/settings/teams/ and call it something obvious like the domain of the site you're making (e.g. #future-mozilla-org).</li> <li>Add appropriate people to the team - developers and admins currently workign on the project</li> <li>For each of Dev, Stage and Prod, make a new project, called something obvious - e.g. <code>birdbox-newsite-mozilla-org-dev</code>. Make sure the Team you made has access to each new Project.</li> <li>Get the Sentry DSN URI from <code>https://mozilla.sentry.io/settings/projects/PROJECT_SLUG/keys/</code></li> <li>Get the Report URI from <code>https://mozilla.sentry.io/settings/projects/PROJECT_SLUG/security-headers/</code></li> </ul> <p>Once you have these two values, you will need to make a PR against https://github.com/mozilla-it/webservices-infra/ to add them to relevant <code>values*.yaml</code> files. This need approval from a member of CODEOWNERS before you can merge it.</p>"},{"location":"bootstrapping/#slack-notification-setup","title":"Slack notification setup","text":"<p>You can set up deployment notifications in Mozilla Slack. To do this, you'll need to tweak some config in the new deployment repo created by Mozilla SRE - see the documentation above.</p> <p>Slack steps:</p> <ol> <li>Make a new, public channel - e.g. <code>#newsite-notify</code></li> <li>Right-click on the channel in the Slack sidebar and <code>View Channel Details</code>.</li> <li>From the bottom of that modal, copy the Channel ID.</li> </ol> <p>Deployment repo steps:</p> <ol> <li>Check out the relevant deployment repo.</li> <li>In the <code>`.github/workflows/</code> directory there are YAML files for Dev, Stage and Prod</li> <li>Each of these files has an <code>env</code> key called <code>SLACK_CHANNEL_ID</code>. It will (likely) be set to a single ID for now - that's SRE's own notification room. You can make the deployment repo send notifications to multiple rooms by switching the value it a comma-separate list of room IDs:</li> </ol> <p>From:</p> <pre><code>SLACK_CHANNEL_ID: FAKE1234567\n</code></pre> <p>To:</p> <pre><code>SLACK_CHANNEL_ID: \"FAKE1234567,FAKE7766554\"\n</code></pre>"},{"location":"bootstrapping/#sso-setup","title":"SSO setup","text":"<p>Note</p> <p>The only way to sign in to a deployed Birdbox-based site is via Mozilla SSO.</p> <p>SSO is managed by the IAM team, and you can request setup via JIRA</p> <ul> <li>Use this template message...</li> <li>...to open an Issue on this board</li> </ul> <p>Maintain least privilege</p> <p>The template above has a space to list Mozilla staff who should be the initial curators of a particular access group. This should be kept as small/tight as possible. In particular, only give someone access to Production if they absolutely need it to do their job.</p> <p>It's always possible add or remove access-group members later on.</p> <p>Once that request is done, there are three steps left:</p> <ol> <li>Get the OIDC credentials into the relevant environments - explained here</li> <li>Bootstrap an admin user for yourself - this is covered below</li> </ol> <p>Don't forget</p> <p>Birdbox does not support automatic user-account creation for someone logging in via SSO, even if they have an @mozilla.com identity - they need to be created first.</p> <p>Only users who already exist in the Wagtail admin as a User will be allowed to log in.</p>"},{"location":"bootstrapping/#wagtail-bootstrap-an-initial-site","title":"Wagtail: bootstrap an initial site","text":"<p>Now comes the stage where you can start adding pages and content into the site, ahead of go-live.</p> <p>Moving content between sites</p> <p>If you have Dev, Stage and Prod sites and you want them all to have similar content, you'll need to set them all up the same way.</p> <p>You can either duplicate the same manual effort across all three, or add content to one of them and then copy it to the other two. That copying process is currently pretty hands-on, but there are some tips here.</p>"},{"location":"bootstrapping/#add-an-initial-admin-user","title":"Add an initial admin user","text":"<p>The system starts with no users, and you can't log in to create users unless a matching account already exists. So, first you have to create one via the CLI.</p> <p>On each deployed environment - dev, stage and prod, do this:</p> <p>1) Shell into a running pod - see here if you need help</p> <p>2) Run <code>python birdbox/manage.py createsuperuser --email=YOURIDENTITY@mozilla.com --username=YOURIDENTITY@mozilla.com --no-input</code>. It is crucial that <code>YOURIDENTITY@mozilla.com</code> matches your Mozilla SSO email address.</p> <p>No password? No problem</p> <p>The line above will create a new admin user but with no password. Normally in Django that would block authentication until a password it set, but because Mozilla SSO does not need a password (and is the only way to authenticate), this is fine.</p> <p>3) You will now be able to sign in at <code>/admin/</code> using your Mozilla SSO identity</p>"},{"location":"bootstrapping/#set-new-root-page","title":"Set new root page","text":"<p>Wagtail comes pre-set-up with a default \"Welcome to your Wagtail site!\" page at the site's root of <code>/</code>. We need to replace this a new <code>HomePage</code>:</p> <ol> <li>Go to <code>/admin/pages/</code> and click the \"Add Child Page\" button.</li> <li>The page will be titled \"Create a page in Root\". Select \"Home Page\" and add an initial title for the page, plus add something temporary in the Content field such as an Article Block. This will allow you to save the page - use the Publish option from the expanding save button at the bottom of the page.</li> <li>Check you can see your new page listed alongside the Wagtail welcome page. Note how the Wagtail welcome page has a globe icon beside it's name: this indicates it is the root page for the site.</li> <li>From the Wagtail menu go to <code>Settings &gt; Sites</code> towards the bottom of the <code>Settings</code> sub-menu)</li> <li>If there is one site listed, click it to edit it. If not, click the <code>Add a site</code> button.</li> <li>Set the fields appropriately including changing the root page of the site to the new Home Page you just made. Mark it as the default site. Save.</li> <li>Go to <code>/</code> and you should see your new skeleton homepage instead</li> <li>We no longer need the Welcome page. Go back to <code>/admin/pages/</code>, hover over the Welcome page and click the <code>...</code> menu. Select <code>Delete</code> and delete the page.</li> </ol>"},{"location":"bootstrapping/#enable-footer-and-nav","title":"Enable footer and nav","text":""},{"location":"bootstrapping/#footer","title":"Footer","text":"<p>The footer can be manually edited via <code>Settings &gt; Configure footer</code>, where links are grouped into columns and the small links are handled as rich text.</p> <p>If you want to quickly add a Mozilla.org-like footer to a site, you can shell into a pod for the relevant environment and run: <code>python birdbox/manage.py bootstrap_footer --commit</code></p>"},{"location":"bootstrapping/#nav","title":"Nav","text":"<p>To enable the navigation bar, go to <code>Settings &gt; Site settings</code>. Here's what the options do:</p> <p>Show nav bar on site? Whether or to have the Nav shown at all</p>"},{"location":"bootstrapping/#navigation-theme","title":"Navigation theme","text":"<p>Dark or light theme. Most Mozilla-brand sites use Dark</p>"},{"location":"bootstrapping/#automatically-generate-nav-from-page-heirarchy","title":"Automatically generate nav from page heirarchy?","text":"<p>If this is enabled, pages that are configured to appear in a Nav will do so, based on the page tree they are part of.</p> <p>To make a page appear in the nav, go to the <code>Settings</code> tab for that page, and tick the <code>Show in Menus</code> checkbox then republish the page. There are other navigation-related fields you may want to also populate first.</p>"},{"location":"bootstrapping/#cta-button","title":"CTA button","text":"<p>If you want a button in the right-side of the nav, this is where you set that up</p> <p>Note</p> <p>After making any changes to Site Settings, remember to Save the settings.</p> <p>The changes are immediately reflected in the site - there is no concept of Preview with Site Settings.</p>"},{"location":"bootstrapping/#add-other-users","title":"Add other users","text":"<p>Now the site is almost ready to lay in content, it might be a good time to allow others to add that content. See the specific notes for adding users.</p> <p>Alternatively, you may wish to lay in all the initial content youself before \"handing over the keys\" - this is also fine.</p>"},{"location":"bootstrapping/#wagtail-lay-in-content","title":"Wagtail: Lay in content","text":"<p>Build out the tree of pages needed in the site, using the page types available in Birdbox. Each page type has a certain set of components/fields/blocks available, as a form of light 'guard rails' to avoid pages becoming a soup of varied components.</p> <p>Pick appropriate page types</p> <p>There are some that are reserved for certain teams (e.g. pages starting <code>Innovations*</code> are for the Innovations team, <code>ProtocolTestPage</code> is reserved for core Birdbox testing) but otherwise you can use whatever page types you want.</p> <p>In the future, we will support a way to limit which page types are available purely via configuration.</p> <p>The best way to get familiar with how to add content via Wagtail is to read the official Editor Guide, which focuses on the CMS editing experience, rather than code. This documentation can also be recommended to the Mozilla colleagues who will be managing content on the site.</p>"},{"location":"bootstrapping/#go-live","title":"Go live","text":"<p>Once you are sure all of the content on the production site is correct, all that remains is to ask SRE to point the public domain to the same service that is serving the internal production domain.</p> <p>Things to check before you go live:</p> <ul> <li>Check the site record (<code>Settings &gt; Site</code>) has the correct hostname in it</li> <li>Check content for any links to the internal hostname, rather than the public-facing hostname</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v100","title":"v1.0.0","text":"<p>Initial release.</p> <p>Used for https://future.mozilla.org</p>"},{"location":"extending/","title":"Extending functionality","text":"<p>This section assumes you know your way around Wagtail. If you need to get up to speed, please work through the following brief sections in the official Wagtail guides. They won't take long and cover essential concepts well.</p> <ul> <li>Getting Started</li> <li>Pages</li> <li>Templates</li> <li>Images in templates</li> <li>Streamfield</li> </ul>"},{"location":"extending/#development-flow","title":"Development flow","text":"<p>Design philosophy</p> <p>Every site created with Birdbox runs off a fork of the main project.</p> <p>If you want to add a new page type, or block type, or anything else to a site that's build from Birdbox, the ideal place is directly within the core <code>mozmeao/birdbox</code> project.</p> <p>We will soon support a way to limit which page types are available purely via configuration, so a growing number of page and block types in the core kit will not mean that forked sites will have too many choices for site editors, causing them confusion or creating an inconsistent look.</p> <p>Contributions to <code>mozmeao/birdbox</code> should be made via Pull Request, as with all other <code>mozmeao</code> projects.</p> <p>Making changes downstream only</p> <p>If you make a fork from the <code>mozmeao/birdbox</code> and then choose to add/extend that forked codebase, there is a real risk that you'll make it hard - or even impossible - to bring it back in sync with the upstream original project, particularly if the changes you make involve database migrations from adding or amending Pages or Blocks.</p> <p>We're not saying you cannot do this, but is is highly discouraged if you think the forked site will need to benefit from future upstream changes.</p> <p>Important: If you \"cut loose\" your forked project, remember that you're now responsible for tracking and applying security patches - you won't necessarily be able to sync with <code>mozmeao/birdbox</code> to get them.</p>"},{"location":"extending/#birdbox-specific-behaviour","title":"Birdbox-specific behaviour","text":"<p>While most of a Birdbox site is \"standard Wagtail\", there is some custom behaviour that is worth noting.</p>"},{"location":"extending/#frontend-media","title":"Frontend Media","text":"<p>Websites often feature static assets generated by a bundler step that outputs a single CSS or JS file. However, because Birdbox sites give editors access to more Protocol components than they may need, we did not want to load one single large lump of CSS or JS that covers all protocol components.</p> <p>Instead, we've elected to include the CSS and JS required for a particular Protocol component only when it's included on the page, in a pattern similar to how Django Forms have a <code>Media</code> object.</p> <p>We do this by specifying a <code>frontend_media</code> property on each custom <code>StructBlock</code>, and at render time we gather URIs for them all and output a deduplicated list of tags into the template.</p> <p>Future improvements to explore:</p> <ul> <li>Support bundling commonly grouped assets, to reduce the number of files loaded while also avoiding loading a monolithic JS or CSS file.</li> <li>Evaluate <code>django-compressor</code> as an easy way to do the above.</li> </ul>"},{"location":"extending/#how-to","title":"How to","text":""},{"location":"extending/#turn-a-protocol-component-into-a-streamfield-block","title":"...turn a Protocol component into a StreamField block","text":"<ol> <li>Define a new block in Python in <code>microsite/blocks.py</code> with the fields/content items that the Protocol component needs (e.g. title, description, image)</li> <li>Add a new HTML template fragment for the new block in <code>microsite/templates/blocks/</code><ul> <li>Base the markup on the HTML in the Protocol docs' examples</li> <li>Remember to circle back and reference the template filename in the Python block definition - see other blocks for examples</li> </ul> </li> <li>If JS or CSS is needed for the component, configure webpack to build it - see <code>src/css/protocol/card.scss</code> as an example or this FAQ.<ul> <li>Remember to circle back to the Python nlock definition to set the <code>frontend_media</code> property so that this CSS/JS gets included on page load</li> </ul> </li> <li>Find the page (in <code>microsite.models</code>) with a <code>StreamField</code> that you want the new component to be available in. Add it to the list of blocks that are available.</li> <li><code>just makemigrations</code> then <code>just migrate</code> to udpate the database.</li> <li>In the Wagtail CMS admin, amend an instance of the relevant page to use your new block - you should be able to see it in the live preview. Usually it takes a bit of tweaking to get the page to look as you intend. You can publish the local page and view it directly while you refine your HTML/CSS/JS, of course.</li> <li>If you need to add custom CSS to override what's in Protocol, ideally please add it to the relevant CSS file in Birdbox for the component. If there is nowhere relevant to put it, such as for layout or element-level styling, please add it to <code>src/css/birdbox-protocol-overrides.css</code></li> </ol>"},{"location":"faqs/","title":"FAQs","text":"<p>Handy reminders of how to do certain things with birdbox</p>"},{"location":"faqs/#infrastructure","title":"Infrastructure","text":""},{"location":"faqs/#how-do-i-redeploy-a-site","title":"How do I redeploy a site?","text":""},{"location":"faqs/#if-there-are-changes-and-you-want-them-to-go-live","title":"If there are changes (and you want them to go live)","text":"<p>Pushing or merging to a specific git branch will trigger a build and deployment for the relevant service:</p> Branch Service What triggers it <code>main</code> Dev PRs being merged <code>stage</code> Staging Push to branch <code>prod</code> Prod Push to branch"},{"location":"faqs/#if-there-are-no-changes-or-i-just-want-to-restart","title":"If there are no changes or I just want to restart","text":"<ol> <li> <p>In the relevant deployment pipeline repository for your site (e.g. <code>mozilla-sre-deploy/deploy-newsite</code>) go to <code>Actions</code> and select the relevant - e.g. <code>Deploy Dev</code>.</p> </li> <li> <p>Look for the <code>Run Workflow</code> button and trigger it for <code>main</code><sup>1</sup>.</p> </li> <li> <p>This will start a deployment of a container based on the latest commit for the relevant branch (Dev: <code>main</code>, Staging: <code>stage</code>, Production: <code>prod</code>).</p> </li> </ol>"},{"location":"faqs/#ive-changed-config-for-the-site-in-webservices-infra-do-i-need-to-redeploy","title":"I've changed config for the site in <code>webservices-infra</code>: do I need to redeploy?","text":"<p>Yes.</p>"},{"location":"faqs/#ive-changed-a-secret-do-i-need-to-redeploy","title":"I've changed a Secret: do I need to redeploy?","text":"<p>Yes.</p> <p>Updated Secrets are immediately available in running pods, but you'll need to restart the Django/Wagtail container to get that to notice the new Secrets, and the way to do that is a redeployment.</p>"},{"location":"faqs/#how-do-i-sign-commits","title":"How do I sign commits?","text":"<p>In order to merge PRs to <code>websites-infra</code>, you'll need signed git commits.</p> <ul> <li> <p>This document gives some context to what a signed commit means in Github.</p> </li> <li> <p>This guide shows how to sign your commits with an SSH key.</p> </li> </ul>"},{"location":"faqs/#how-do-i-shell-into-a-running-pod","title":"How do I shell into a running pod","text":"<p>This is documented internally, but you'll need to know the cluster name(s), project ID and namespace(s) of your pods</p>"},{"location":"faqs/#how-do-i-edit-secrets","title":"How do I edit Secrets?","text":"<p>The infrastructure-setup stage will configure most of the secrets required for a Birdbox project such as DB, storage and email credentials that cannot to into a git repo.</p> <p>Birdbox does need at least SSO/OIDC secrets to be set up by a developer. This is done via SRE's gsm.py helper.</p>"},{"location":"faqs/#how-to-i-copy-data-between-devstageprod-sites","title":"How to I copy data between dev/stage/prod sites?","text":"<p>Currently, there is no automated way to do this. SRE may need to help you, if you don't already have appropriate access. If you do want to try this yourself, let @stevejalim know and he'll do his best to guide you.</p> <p>To duplicate site content from, say, Prod to Dev:</p> <ol> <li>Get a SQL backup of Prod</li> <li>Download a copy of the media uploaded to the Prod cloud bucket</li> <li>Copy the assets into the Dev stage bucket</li> <li>Load the SQL into the Dev database</li> <li>Redeploy the Dev instance (with no code changes)</li> <li>In the Wagtail admin, go to <code>Settings &gt; Site</code> and change the hostname to suit Dev.</li> </ol>"},{"location":"faqs/#cms-site","title":"CMS / Site","text":""},{"location":"faqs/#how-do-i-do-x-in-wagtail","title":"How do I do X in Wagtail?","text":"<ul> <li>First stop: https://guide.wagtail.org/en-latest/</li> <li>Second stop: #wagtail in Mozilla Slack</li> <li>Third stop: #birdbox in Mozilla Slack</li> </ul>"},{"location":"faqs/#how-do-i-add-css-or-js-to-the-project","title":"How do I add CSS or JS to the project?","text":"<p>The CSS/JS build approach is based heavily on how Bedrock builds its assets (just without the concept of pre-defined bundles).</p> <p>To add a new CSS or JS file:</p> <ul> <li>Make a new source file in <code>src/css/</code> or <code>src/js/</code></li> <li> <p>In <code>webpack.config.js</code>, add to the <code>entry</code> map in <code>module.exports</code>:</p> <p>{     ...     \"name-of-compiled-asset-styles\": \"./src/css/path/to/asset-source.scss\",     ...     \"name-of-compiled-asset-script\": \"./src/js/path/to/asset-source.es6\",     ... } * Now, when you're referring to the compiled asset (eg in <code>frontend_media</code> on a <code>StructBlock</code> or in a <code>&lt;link&gt;</code> or <code>&lt;script&gt;</code> tag in HTML) refer to the file with a <code>.js</code> or <code>.css</code> as appropriate:</p> </li> <li> <p><code>css/name-of-compiled-asset-styles.css</code></p> </li> <li><code>js/name-of-compiled-asset-script.js</code></li> </ul>"},{"location":"faqs/#how-do-i-configure-the-nav-for-a-site","title":"How do I configure the nav for a site?","text":"<p>See here.</p>"},{"location":"faqs/#how-do-i-edit-the-footer-for-site","title":"How do I edit the footer for site?","text":"<p>See here.</p> <ol> <li> <p>This trigger branch refers to the <code>main</code> branch of the pipeline code in <code>deploy-newsite</code>, not the <code>birdbox-newsite</code> application codebase.\u00a0\u21a9</p> </li> </ol>"},{"location":"local_development/","title":"Local development","text":"<p>This section explains how to get Birdbox running on your machine, so you can maintain and extend it.</p>"},{"location":"local_development/#running-directly-on-your-machine","title":"Running directly on your machine","text":"<p>This mode uses sqlite for the DB and stores uploaded media on your machine.</p> <ul> <li>Install the <code>just</code> taskrunner (Docs here; spoiler: <code>brew install just</code>)</li> <li>Check out the repo</li> <li><code>cd path/to/birdbox</code></li> <li> <p>Create then activate a virtual environment (<code>pyenv</code> + <code>pyenv-virtualenv</code> is recommended, but not required - see Bedrock docs for installation details). Python 3.11+ is required, which you can install with <code>pyenv install 3.11.3</code></p> <pre><code>pyenv virtualenv 3.11.3 birdbox\npyenv activate birdbox\n</code></pre> </li> <li> <p><code>just preflight</code> to install Python and JS dependencies, run migrations (against a simple SQLite DB for local dev) and create a cache table</p> </li> <li>Duplicate the <code>.env-example</code> file as <code>.env</code>. Make sure to set <code>Debug=True</code> for local development (the default is <code>False</code>). You will also need to comment out the two lines related to Sentry and CSP reporting endpoints if you are not using kent locally.</li> <li>To make an admin user <code>just createsuperuser</code>. If there are no SSO credentials in your local environment or <code>.env</code> file, Birdbox falls back to standard username-plus-password auth.</li> <li>To run the local webpack bundler + django runserver: <code>just run-local</code> or <code>npm start</code> (both do the same thing)</li> <li>Go to http://localhost:8000 for the default Wagtail site, and http://localhost:8000/admin/ for the CMS UI</li> <li>Ideally you would now load in an export from another developer (see tips below), or you can bootstrao your own local site using the same steps for a live site.</li> </ul>"},{"location":"local_development/#running-via-docker-on-your-machine","title":"Running via Docker on your machine","text":"<p>We expect most active development to happen directly on 'bare metal', but it's possible to build and use Docker containers to run Birdbox locally, avoiding the virtualenv and local dependency steps.</p> <p>Note</p> <p>Dockerized Birdbox uses a separate Postgres container for its database, not sqlite, so does not (currently) support the exporting and importing of local state.</p> <ul> <li>Install the <code>just</code> taskrunner (Docs here; spoiler: <code>brew install just</code>)</li> <li>Have Docker desktop and Docker Compose installed</li> <li>Check out the repo</li> <li><code>cd path/to/birdbox</code></li> <li>Build the needed containers: <code>docker-compose build assets app</code></li> <li>Run the app container: <code>docker-compose up app</code> then go to http://localhost:8080 -- note that at the moment you'll start with the default, empty, Wagtail site.</li> </ul> <p>To run commands in the Docker containers, there are a couple of convenience helpers:</p> <ul> <li><code>just docker-preflight</code> - the same preflighting steps as for local, just run in Docker</li> <li><code>just docker-shell</code> - run a bash shell in an already-running Docker container</li> <li><code>just docker-manage-py SOME_COMMAND</code> - run Django's <code>manage.py</code> script in the already-running docker container, with SOME_COMMAND passed as extra args. e.g.<code>just docker-manage-py makemigrations</code></li> </ul> <p>To that end, if you're setting up a new Docker build locally, you'll want to do the following just to get Wagtail running, but with no imported content.</p> <pre><code>just docker-preflight\njust docker-manage-py createsuperuser\njust docker-manage-py bootstrap_footer\n</code></pre>"},{"location":"local_development/#using-cloud-storage-with-local-docker-build","title":"Using cloud storage with local Docker build","text":"<p>When using Docker locally, it's possible to configure birdbox to use cloud storage, as we do on a deployed/real site.</p> <p>To do this, copy <code>./docker/envfiles/local.env.example</code> as <code>./docker/envfiles/local.env</code> and add the relevant env vars for the cloud bucket. The example env file has a link to Django-Storages documentation, which  shows what to set and also links to how to get the Google Cloud Storage (GCS) credentials.</p> <p>For local use of Docker with GCS, you'll need to put those credentiuals somewhere that the Docker container can reach them - that's what the <code>local-credentials</code> directory is for: copy the relevant JSON credentials file into there and update the<code>GOOGLE_APPLICATION_CREDENTIALS</code> var in <code>local.env</code> file to reference its exact filename.</p> <p>Once that's done, restart the Docker app and it should Just Work.</p>"},{"location":"local_development/#local-development-tips","title":"Local development tips","text":""},{"location":"local_development/#how-to-import-and-export-local-data","title":"How To: import and export local data","text":"<p>For local development directly on a machine (not via Docker), we use sqlite as our database, in part because it makes it easier to give another developer a copy of your state, which they can load in to be able to work with the same content you have. This is particularly useful for code review.</p> <p>(Note that it's not just the database we need to share around: we also need media files that line up with the records in the relevant DB table.)</p> <ol> <li> <p>To export a zip file of your local DB and images:</p> <p><code>just export-local-data</code></p> <p>...and note where the zip file is generated. Send that file to a colleague as needed. Note that it is zipped but not password-protected so think about its contents before transmitting.</p> </li> <li> <p>To load in a zip file of DB and image data</p> <p><code>just import-local-data /path/to/downloaded/file.zip</code></p> <p>This will entirely replace your current sqlite DB file and load in all the images, overwriting existing files if they have the same name. Note that it does not delete image files that aren't in the zip of data.</p> </li> </ol>"},{"location":"maintenance/","title":"Maintenance","text":"<p>Design philosophy</p> <p>Every site created with Birdbox runs off a fork of the main project.</p> <p>This was a deliberate design decision, trying to balance maintainability and stability with increasing functionality.</p> <p>As such, a fix made to the core repository must be able to be flowed downstream to its forks. Care must be taken to ensure this can happen in a way that does not break those forks.</p> <p>For documentation on carrying out actual maintenance work, please see Extending.</p>"},{"location":"maintenance/#dependency-update-policy","title":"Dependency update policy","text":"<p>Core <code>mozmeao/birdbox</code> runs Github Dependabot alerts for both security vulnerabilities and regular dependency updates.</p> <p>We will proactively keep core birdbox as up to date as practical:</p> <ul> <li>General dependency updates to the core codbase will be flowed downstream to all forks within 14 days of them landing in core.</li> <li>Security dependency updates to the core codebase will be flowed downstream within 24 business hours of them landing in core.</li> </ul>"},{"location":"maintenance/#steps-for-updating-a-downstream-fork","title":"Steps for updating a downstream fork","text":"<p>Once a change/fix has landed in core <code>mozmeao/birdbox</code> and you have identified which downstream fork you want to update (first - you'll need to do them all, ultimately), here's a process to use.</p> <p>(Here we'll refer to an existing, earlier-made fork as <code>forkedsite</code>. Forks should have an <code>upstream</code> remote, which is <code>mozmeao/birdbox</code>. You can check this with <code>more .git/config</code> in a local checkout of <code>forkedsite</code>.)</p> <ol> <li>Check out the <code>main</code> branch of <code>forkedsite</code> and ensure you're up to date. e.g. <code>git switch main &amp;&amp; git pull --ff-only</code></li> <li>Fetch the latest state of upstream's main branch: <code>git fetch upstream main</code></li> <li>Compare it with the fork's main: <code>git diff upstream/main..HEAD</code></li> <li>Sync <code>forkedsite:main</code> to be the same as <code>birdbox:main</code> with <code>git merge upstream/main --ff-only</code> (or use the Github UI)</li> <li>Check the log <code>forkedsite</code> and ensure it has all the commits that you'd expect from <code>mozmeao/birdbox</code></li> <li>Push up the changes to the Github repo for <code>forkedsite</code>: <code>git push origin main</code>. This will trigger CI on that repo and also deploy it to the dev service.</li> <li>Check that CI is all green and that the Dev service is happy. Deploy to stage and then prod as per Extending.</li> </ol> <p>(Suggestions for improvements to this process are very welcome.)</p>"},{"location":"maintenance/#reporting-security-vulnerabilities","title":"Reporting Security vulnerabilities","text":"<p>If you believe that you've found a Mozilla-related security vulnerability in <code>mozmeao/birdbox</code>, please report it by sending an email to security@mozilla.org.</p>"},{"location":"sre_template_setup_message/","title":"Template message for requesting Birdbox-suited infra setup","text":"<p>You should request this work via a JIRA ticket - hit the Create button here and copy-paste-adapt the following message to suit.</p> <pre><code>Hello!\n\nI would like to request the setup of a new website, using the Birdbox pattern.\n\nThe site will be for DEPARTMENT/TEAM/ORG/PROJECT.\n\nThe ideal date to have this set up is DATE_HERE. The planned go-live date for\nthe new site is LAUNCH_DATE_HERE.\n\n## Tenant/Service\n\nWe need a new tenant, a mozilla-sre-deploy pipeline and domains set up, please.\n\nThe Docker image for the pipeline will come from a fork of `mozmeao/birdbox`\nat: https://github.com/ORG_NAME)HERE/REPO_NAME_HERE`\n\nAs common for a Birdbox project we will need two k8s jobs set up:\n\n* `db-migrate`` - runs `python birdbox/manage.py migrate` once with every deploy\n* `scheduled-publishing`` - runs `python birdbox/manage.py publish_scheduled` every 30 mins\n\nThe required backing services are standard for Birdbox-based projects:\n\n* Postgres\n* Redis\n* Google Cloud Storage\n* SMTP mail sending\n* A CDN for each dev, stage and prod.\n* Performance reporting (Grafana) would also be nice, but doesn't have to\nhappen straight away.\n\n## Hostnames\n\nThe ideal hostname/domain setup will be:\n\n    Dev: dev.PROJECT_NAME.nonprod.webservices.mozgcp.net\n\n    Stage: stage.PROJECT_NAME.nonprod.webservices.mozgcp.net\n\n    Prod, internal/discreet: prod.PROJECT_NAME.prod.webservices.mozgcp.net\n    Prod, public-facing: SOME_SUBDOMAIN.mozilla.org or SOME_DOMAIN.TLD\n\n**Please note that the public-facing domain name for Production should NOT be enabled yet, please.**\n\n## Further configuraition\n\nThe service will use Mozilla SSO to authenticate CMS users. We will obtain these\ncredentials from the IAM team and can provision them as secrets ourselves.\n\nWhen the tenant is set up, please can you let me know the names of the relevant clusters and projects so that I can shell in to the pods running on them, in order to set up the application.\n\nIf you have any questions, please don't hesitate to ask.\n\nMany thanks\n</code></pre>"},{"location":"template_requests/sso_setup_request_template/","title":"Sso setup request template","text":"<pre><code>Hello!\n\nWe are working on a microsite for &lt;TEAM/ORG&gt; which is due to go live on &lt;DATE&gt;.\n\nIt's a project build on the [Birdbox](https://github.com/mozmeao/birdbox) kit and needs SSO setting up to allow access to the content management system\n\nFor _each_ of the sites/domains listed below, I would be extremely grateful if you can please provision the following:\n\n1. OIDC credentials for each site as mentioned in [this documentation](https://mozilla-django-oidc.readthedocs.io/en/stable/installation.html#acquire-a-client-id-and-client-secret).\n\n2. A specific group created in people.m.o for each site to allow SSO access (group names and curators will be listed below)\n\n3. The relevant IAM-side mapping so that only members of that specific people.m.o group can sign in to a site using the OIDC credentials above\n\nSetup spec:\n\n(The OIDC callback path for all of the below will be `/oidc/callback/`)\n\n1. NEWSITE Production\n\n* Domain(s): https://NEWSITE.mozilla.com, https://prod.NEWSITE.CLUSTER.SUBDOMAIN.DOMAIN.TLD\n\n* people.m.o group name: `birdbox-NEWSITE-production`\n\n* Initial curators: YOUR_HANDLE@mozilla.com, APPROPRIATE_PERSON@mozilla.com\n\n2. NEWSITE Staging\n\n* Domain(s): https://stage.NEWSITE.CLUSTER.SUBDOMAIN.DOMAIN.TLD\n\n* people.m.o group name: `birdbox-NEWSITE-staging`\n\n* Initial curators: YOURHANDLE@mozilla.com, OTHERDEVELOPER1@mozilla.com\n\n3. NEWSITE Development\n\n* Domain(s): https://dev.NEWSITE.CLUSTER.SUBDOMAIN.DOMAIN.TLD, http://localhost:8000, http://locahost:8080, http://127.0.0.1:8000, http://127.0.0.1:8080\n\n* people.m.o group name: `birdbox-NEWSITE-development`\nd\n* Initial curators: YOURHANDLE@mozilla.com, OTHERDEVELOPER1@mozilla.com\n\n\nCredentials can be sent to be via whatever secure mechanism the IAM team prefers. I will ensure they are set for the services that need them.\n\nAny questions, just ask in comments on this ticket, in #birdbox, or via DM.\n\nThank you!\n</code></pre>"},{"location":"tenant_config_examples/values-env-specific/","title":"Env vars needed in a <code>values-{ENV}.yaml</code> file","text":"<p>Look for the <code>env</code> section and ensure the following are present, adapting/updating as appropriate.</p> <p>The CSP config below may not be identical for every site, but it's a very good start</p> <pre><code>env:\n  app_name: NEWSITE-prod  # or -stage or -dev\n  base_site_url: https://NEWSITE.mozilla.org  #\u00a0or the internal domain https://ENV.NEWSITE.CLUSTER.SUBDOMAIN.DOMAIN.TLD\n  csp_enabled: True\n  csp_report_only: False  # You may want to make this True, initially\n  csp_connect_src: \"'self' https://region1.google-analytics.com https://basket.mozilla.org www.google-analytics.com\"\n  csp_frame_src: \"'self' www.youtube-nocookie.com www.youtube.com player.vimeo.com\"\n  csp_img_src: \"'self' data: https://storage.googleapis.com/RELEVANT_STORAGE_BUCKET_NAME_HERE/ https://region1.google-analytics.com https://www.googletagmanager.com\"\n  csp_script_src: \"'self' www.googletagmanager.com\"\n  csp_reporting_endpoint: GET_THIS_FROM_SENTRY # See Birdbox documentation for guidance\n  sentry_dsn: GET_THIS_FROM_SENTRY  # See Birdbox documentation for guidance\n  wagtailadmin_base_url: https://NEWSITE.mozilla.org ## or the internal domain https://ENV.NEWSITE.CLUSTER.SUBDOMAIN.DOMAIN.TLD --\u00a0note no trailing slash or path to /admin/\n...\n</code></pre>"},{"location":"tenant_config_examples/values-excerpt/","title":"Env vars needed in <code>values.yaml</code>","text":"<p>Look for the <code>env</code> section and ensure the following are present</p> <pre><code>env:\n  basket_newsletter_data_do_sync: \"False\"\n  google_tag_id: \"&lt;insert Google Tag Manager ID here, if relevant else leave as an empty string&gt;\"\n  secure_hsts_seconds: \"31536000\"\n  is_https: \"True\"\n...\n</code></pre>"}]}